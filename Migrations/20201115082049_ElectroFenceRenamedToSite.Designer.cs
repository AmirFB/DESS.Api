// <auto-generated />
using System;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using Dess.Api.DbContexts;

namespace DESS.Migrations
{
    [DbContext(typeof(DessDbContext))]
    [Migration("20201115082049_ElectroFenceRenamedToSite")]
    partial class ElectroFenceRenamedToSite
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dess.Api.Entities.Input", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<bool>("Enabled")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("ModuleId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<byte>("Timer")
                    .HasColumnType("tinyint unsigned");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ModuleId");

                b.ToTable("Inputs");

                b.HasData(
                    new
                    {
                        Id = 1,
                            Enabled = true,
                            ModuleId = 1,
                            Timer = (byte)0,
                            Type = 0
                    },
                    new
                    {
                        Id = 4,
                            Enabled = true,
                            ModuleId = 1,
                            Timer = (byte)0,
                            Type = 1
                    });
            });

            modelBuilder.Entity("Dess.Api.Entities.Output", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<bool>("Enabled")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("ModuleId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<short>("ResetTime")
                    .HasColumnType("smallint");

                b.Property<string>("Triggers")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ModuleId");

                b.ToTable("Outputs");

                b.HasData(
                    new
                    {
                        Id = 1,
                            Enabled = true,
                            ModuleId = 1,
                            ResetTime = (short)0,
                            Triggers = "0",
                            Type = 0
                    },
                    new
                    {
                        Id = 4,
                            Enabled = true,
                            ModuleId = 1,
                            ResetTime = (short)0,
                            Triggers = "0",
                            Type = 1
                    });
            });

            modelBuilder.Entity("Dess.Api.Entities.Site", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<bool>("Applied")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("AutoLocation")
                    .HasColumnType("tinyint(1)");

                b.Property<byte>("BatteryMin")
                    .HasColumnType("tinyint unsigned");

                b.Property<bool>("BatteryWarning")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Hash")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("HvEnabled")
                    .HasColumnType("tinyint(1)");

                b.Property<byte>("HvPower")
                    .HasColumnType("tinyint unsigned");

                b.Property<byte>("HvRepeat")
                    .HasColumnType("tinyint unsigned");

                b.Property<short>("HvThreshold")
                    .HasColumnType("smallint");

                b.Property<byte>("Interval")
                    .HasColumnType("tinyint unsigned");

                b.Property<string>("Latitude")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Longitude")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("LvEnabled")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("SerialNo")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("TamperEnabled")
                    .HasColumnType("tinyint(1)");

                b.Property<sbyte>("TemperatureMax")
                    .HasColumnType("tinyint");

                b.Property<sbyte>("TemperatureMin")
                    .HasColumnType("tinyint");

                b.Property<bool>("TemperatureWarning")
                    .HasColumnType("tinyint(1)");

                b.Property<byte>("Timeout")
                    .HasColumnType("tinyint unsigned");

                b.Property<bool>("UseGlobalInterval")
                    .HasColumnType("tinyint(1)");

                b.HasKey("Id");

                b.ToTable("Sites");

                b.HasData(
                    new
                    {
                        Id = 1,
                            Applied = false,
                            AutoLocation = false,
                            BatteryMin = (byte)0,
                            BatteryWarning = false,
                            HvEnabled = true,
                            HvPower = (byte)70,
                            HvRepeat = (byte)2,
                            HvThreshold = (short)3000,
                            Interval = (byte)10,
                            Latitude = "38.0962",
                            Longitude = "46.2738",
                            LvEnabled = true,
                            Name = "T5011",
                            SerialNo = "SC20D3001N",
                            TamperEnabled = false,
                            TemperatureMax = (sbyte)0,
                            TemperatureMin = (sbyte)0,
                            TemperatureWarning = false,
                            Timeout = (byte)0,
                            UseGlobalInterval = false
                    });
            });

            modelBuilder.Entity("Dess.Api.Entities.SiteFault", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("ObviatedOn")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("OccuredOn")
                    .HasColumnType("datetime(6)");

                b.Property<int>("ResetedBy")
                    .HasColumnType("int");

                b.Property<DateTime>("ResetedOn")
                    .HasColumnType("datetime(6)");

                b.Property<string>("SeenBy")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<int>("SiteId")
                    .HasColumnType("int");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("SiteId");

                b.ToTable("Logs");
            });

            modelBuilder.Entity("Dess.Api.Entities.SiteStatus", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<byte>("BatteryLevel")
                    .HasColumnType("tinyint unsigned");

                b.Property<int>("BatteryStatus")
                    .HasColumnType("int");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Hash")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("HvAlarm")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("HvChargeFault")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("HvDischargeFault")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("HvPowerFault")
                    .HasColumnType("tinyint(1)");

                b.Property<short>("HvVoltage")
                    .HasColumnType("smallint");

                b.Property<string>("Inputs")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("IpAddress")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Latitude")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Longitude")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("LvAlarm")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("MainPowerFault")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Outputs")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("SerialNo")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<byte>("SignalStrength")
                    .HasColumnType("tinyint unsigned");

                b.Property<int>("SiteId")
                    .HasColumnType("int");

                b.Property<bool>("TamperAlarm")
                    .HasColumnType("tinyint(1)");

                b.Property<short>("Temperature")
                    .HasColumnType("smallint");

                b.HasKey("Id");

                b.HasIndex("SiteId")
                    .IsUnique();

                b.ToTable("Statuses");

                b.HasData(
                    new
                    {
                        Id = 1,
                            BatteryLevel = (byte)0,
                            BatteryStatus = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HvAlarm = false,
                            HvChargeFault = false,
                            HvDischargeFault = false,
                            HvPowerFault = false,
                            HvVoltage = (short)0,
                            LvAlarm = false,
                            MainPowerFault = false,
                            SignalStrength = (byte)0,
                            SiteId = 1,
                            TamperAlarm = false,
                            Temperature = (short)0
                    });
            });

            modelBuilder.Entity("Dess.Api.Entities.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<int>("GroupId")
                    .HasColumnType("int");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("GroupId");

                b.ToTable("Users");

                b.HasData(
                    new
                    {
                        Id = 1,
                            FirstName = "Amir",
                            GroupId = 1,
                            LastName = "Fakhim-Babaei",
                            Password = "$2a$11$FtBN2MxIs12/MOj9fjcAm.nslgRY8fPMGe7jFD8O81.WzUSIzPWiS",
                            Username = "expert"
                    },
                    new
                    {
                        Id = 2,
                            FirstName = "Amir",
                            GroupId = 2,
                            LastName = "Fakhim-Babaei",
                            Password = "$2a$11$oVqN7mxLE15uCbM5kBOvteGYab3/Yic6Ibrzcj28Nf6BeqHD.h1VK",
                            Username = "admin"
                    },
                    new
                    {
                        Id = 3,
                            FirstName = "Amir",
                            GroupId = 3,
                            LastName = "Fakhim-Babaei",
                            Password = "$2a$11$a.P3ToHmDquwTSpzNELkx.Us2vShCcEh3Uz0pGZCWs53AZwJLi55S",
                            Username = "operator"
                    });
            });

            modelBuilder.Entity("Dess.Api.Entities.UserGroup", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Title")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.ToTable("UserGroups");

                b.HasData(
                    new
                    {
                        Id = 1,
                            Title = "Almighty"
                    },
                    new
                    {
                        Id = 2,
                            Title = "Expert"
                    },
                    new
                    {
                        Id = 3,
                            Title = "Admin"
                    },
                    new
                    {
                        Id = 4,
                            Title = "Operator"
                    });
            });

            modelBuilder.Entity("Dess.Api.Entities.UserGroupPermission", b =>
            {
                b.Property<int>("GroupId")
                    .HasColumnType("int");

                b.Property<int>("PermissionId")
                    .HasColumnType("int");

                b.HasKey("GroupId", "PermissionId");

                b.HasIndex("PermissionId");

                b.ToTable("UserGroupPermissions");

                b.HasData(
                    new
                    {
                        GroupId = 1,
                            PermissionId = 1
                    },
                    new
                    {
                        GroupId = 1,
                            PermissionId = 2
                    },
                    new
                    {
                        GroupId = 1,
                            PermissionId = 3
                    },
                    new
                    {
                        GroupId = 1,
                            PermissionId = 4
                    },
                    new
                    {
                        GroupId = 1,
                            PermissionId = 5
                    },
                    new
                    {
                        GroupId = 2,
                            PermissionId = 2
                    },
                    new
                    {
                        GroupId = 2,
                            PermissionId = 3
                    },
                    new
                    {
                        GroupId = 2,
                            PermissionId = 4
                    },
                    new
                    {
                        GroupId = 2,
                            PermissionId = 5
                    },
                    new
                    {
                        GroupId = 3,
                            PermissionId = 2
                    },
                    new
                    {
                        GroupId = 3,
                            PermissionId = 3
                    },
                    new
                    {
                        GroupId = 3,
                            PermissionId = 5
                    },
                    new
                    {
                        GroupId = 4,
                            PermissionId = 2
                    });
            });

            modelBuilder.Entity("Dess.Api.Entities.UserLog", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("LogId")
                    .HasColumnType("int");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("LogId");

                b.HasIndex("UserId");

                b.ToTable("UserLogs");
            });

            modelBuilder.Entity("Dess.Api.Entities.Permission", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Title")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.ToTable("Permissions");

                b.HasData(
                    new
                    {
                        Id = 1,
                            Title = "IsAlmighty"
                    },
                    new
                    {
                        Id = 2,
                            Title = "CanResetFaults"
                    },
                    new
                    {
                        Id = 3,
                            Title = "CanEditSites"
                    },
                    new
                    {
                        Id = 4,
                            Title = "CanEditUserGroups"
                    },
                    new
                    {
                        Id = 5,
                            Title = "CanEditUsers"
                    });
            });

            modelBuilder.Entity("Dess.Api.Entities.Input", b =>
            {
                b.HasOne("Dess.Api.Entities.Site", "Module")
                    .WithMany("Inputs")
                    .HasForeignKey("ModuleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Dess.Api.Entities.Output", b =>
            {
                b.HasOne("Dess.Api.Entities.Site", "Module")
                    .WithMany("Outputs")
                    .HasForeignKey("ModuleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Dess.Api.Entities.SiteFault", b =>
            {
                b.HasOne("Dess.Api.Entities.Site", null)
                    .WithMany("Log")
                    .HasForeignKey("SiteId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Dess.Api.Entities.SiteStatus", b =>
            {
                b.HasOne("Dess.Api.Entities.Site", null)
                    .WithOne("Status")
                    .HasForeignKey("Dess.Api.Entities.SiteStatus", "SiteId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Dess.Api.Entities.User", b =>
            {
                b.HasOne("Dess.Api.Entities.UserGroup", "Group")
                    .WithMany("Users")
                    .HasForeignKey("GroupId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Dess.Api.Entities.UserGroupPermission", b =>
            {
                b.HasOne("Dess.Api.Entities.UserGroup", "Group")
                    .WithMany("UserGroupPermissions")
                    .HasForeignKey("GroupId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dess.Api.Entities.Permission", "Permission")
                    .WithMany("UserGroupPermissions")
                    .HasForeignKey("PermissionId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Dess.Api.Entities.UserLog", b =>
            {
                b.HasOne("Dess.Api.Entities.SiteFault", "Log")
                    .WithMany()
                    .HasForeignKey("LogId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Dess.Api.Entities.User", "User")
                    .WithMany("UserLogs")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}